### Задания к занятию 3

* Определение и вызов методов
* Параметры и аргументы
* Возвращаемое значение
* Объектно-Ориентированное Программирование
* Определение собственных типов данных (классов)
* Создание объектов
* Метод-конструктор
* Определение поведения (методов) и состояния (переменных экземпляра) объекта
* Доступ к переменным экземпляра за пределами области видимости объекта



#### 1. Методы Ruby Core API

Найдите в документации Ruby по адресу http://ruby-doc.org/core/ методы для объектов разных классов. Поэкспериментируйте с ними в интерактивной оболочке `irb`

Для класса `Hash`:

* Метод, принимающий блок и удаляющий пару, если условие внутри блока вычисляется в `true`

* Метод, проверяющий пуст ли хэш

* Метод, принимающий аргументы переменной длины, каждый из которых является ключом хэша. Если удаётся последовательно получить значение для каждого из ключей, возвращается это значение. Если нет - возвращается `nil`. Трудно объяснить метод словами, поэтому ниже пример:

```ruby
storage = { data: { name: 'John' } }
storage.<method>(:data, :name) # => 'John'
storage.<method>(:data, :age)  # => nil
```

Для класса `Symbol`:

* Метод, возвращающий массив всех определённых символов в памяти на данный момент

* Метод, проверяющий находится ли зданное имя символа между двумя другими заданными именами символов. Между – имеется в виду проверка по кодам ASCII для символов из которых состоит объект класса `Symbol`

Для класса `File`:

* Метод, превращающий путь к файлу в его абсолютный путь

* Метод проверяющий, является ли данный файл каталогом

* Метод проверяющий существование файла

* Метод возвращающий время модификации файла

Для класса `Time`:

* Метод, возвращающий текущее время

* Метод, проверяющий пятница ли сегодня

* Метод, возвращающий строку с названием часового пояса

Для модуля `Kernel`:

* Метод, возволяющий исполнять любой Ruby код, переданный в качестве строки

* Метод, позволяющий приостановить работу программы на определённое количество секунд



#### 2. Дополнительно поведение класса `Point`

* Добавьте метод `similar_quarter?` для проверки того, лежат ли обе точки в одной четверти координатной плоскости. Метод должен возвращать `true` или `false`

* Метод проверяющий лежит ли точка в начале координат

* Метод, устанавливающий точку в начало координат



#### 3. Собственный тип данных

Подумайте над любой задачей из реального мира, определите сущность из этой задачи и опишите её с помощью класса. Желательно чтобы в классе было:

* Метод-конструктор `initialize`

* Переменные экземпляра

* Способность обращаться к переменным экземпляра за пределами области видимости объекта

* Метод `to_s` который будет переопределять такой же метод из класса `Object` и представлять ваш объект в строковом виде. Например, вы можете вывести словесное название объекта и его переменные экземпляра



#### 4. ООП в движении

Понаблюдайте и попробуйте описать (в виде свободного текста) процесс взаимодействия между объектами по аналогии с примером продавца. Постарайтесь чётко обозначить какие объекты участвуют во взаимодействии, каким поведением (методами) они обладают и каким состоянием (переменными экземпляра), какие методы вызываются в процессе взаимодействия.



### Контакты для связи

* [GeekBrains](http://geekbrains.ru)
* Электронная почта: `spaceflow@gmail.com`
* [Slack](http://geekbrains-ruby0216.slack.com) канал

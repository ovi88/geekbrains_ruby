### Задания к занятию 7

* Стандартная библиотека Ruby Std-lib
* Использование сторонних Gem-ов (библиотек)
* Создание собственного Gem-а (библиотеки)



#### Стандартная библиотека Ruby Std-lib

Как правило, языки программирования реализуют фундаментальные концепции и включают в себя основные функциональные возможности. В их числе: типы данных и общие функции для работы с ними, управляющие конструкции, возможности для определения собственных типов данных, функций и методов. Такой подход позволяет оставаться языку программирования достаточно компактным и вместе с тем предоставлять все возможности для решения множества задач из самых различных предметных областей. Это сродни строительным блокам или брускам пластелина, из которых вы можете создать то что вам требуется.

Однако, часто даже в различных предметных областях встречаются похожие задачи. Например, не зависимо от природы задачи, нам скорее всего потребуется возможность сетевого соединения и получения данных по сети, работа с данными в формате JSON или XML, вычисление хэш функций или логирование. Кроме того, нам могут пригодиться реализации инженерных концепций: веб сервера для локальной разработки, шаблонов проектирования программного кода или обработка параметров командной строки. Все эти задачи, с одной стороны, не вполне вписываются в базовую функциональность ядра языка, а с другой - достаточно часто встречаются при решении задач. Именно здесь стандартная библиотека играет ключевую роль.

Стандартная библиотека Ruby Std-lib поставляется вместе с интерпретатором (это значит что после установки Ruby ничего дополнительно устанавливать не нужно), однако при запуске программы Std-lib по умолчанию не доступна. Это понятно, поскольку заранее не известно потребуется ли нам что-то из Std-lib или нет. В том случае когда мы нуждаемся, например в возможности обработки данных в формате JSON, мы можем задействовать соответствующую библиотеку из Std-lib с помощью вызова метода `require`:

```ruby
require 'json'
```

После этого необходимые модули, классы и методы становятся доступны для работы с JSON данными:

```ruby
require 'json'

user = { first_name: 'John', last_name: 'Doe', age: 26 }
json_string = user.to_json

parsed_user = JSON.parse json_string
parsed_user['first_name'] # => 'John'
```

Обратите внимание на одну особенность: после парсинга объекта `user` ключи являются объектами класса `String`, а не класса `Symbol` как было изначально.

Подробности и документация Ruby Std-lib находится здесь: http://ruby-doc.org/stdlib


#### Использование сторонних Gem-ов (библиотек)

Не смотря на широкие возможности Ruby Std-lib, нам часто могут понадобиться дополнительные инструменты. Например, фреймворк или библиотека для реализации модели «[Конечный автомат]». За более чем 20 лет жизни Ruby было создано огромное количество сторонних библиотек для облегчения решения всевозможных задач: от загрузки изображений до консольного менеджера задач. Де факто основным источником сторонних библиотек является http://rubygems.org

Остаются 2 вопроса: как заполучить необходимую библиотеку в свой проект и как найти эту библиотеку.

Для установки библиотек с http://rubygems.org де-факто используется встроенный в Ruby менеждер библиотек [RubyGems]. Он позволяет вам установить нужную библиотеку с помощью команды `gem install`. Например, для установки фреймворка Rails: `gem install rails`, для установки Gem-а для работы с конечным автоматом: `gem install workflow`.

После этого вы сможете использовать Gem в вашем приложении подключив его также как и стандартную библиотеку (с помощью метода `require`):

```ruby
require 'workflow'

class Comp

  include Workflow

  workflow do
    state :off do
      event :turn_on, transitions_to: :on
    end

    state :on do
      event :turn_off, transitions_to: :off
      event :reboot, transitions_to: :rebooting
    end

    state :rebooting do
      event :load, transitions_to: :on
    end
  end

end

wizard = Comp.new
wizard.current_state.name # => :off
wizard.on? # => false
wizard.turn_on!
wizard.on? # => true
```

Как вы уже заметили, библиотеки в Ruby принято называть Gem-ами.

Второй вопрос касается того, как найти Gem для решения требуемой задачи? В этом могут помочь ресурсы https://www.ruby-toolbox.com/categories/by_name и http://awesome-ruby.com

#### Создание собственного Gem-а (библиотеки)

На практике бывает полезно создать свой собственный Gem. Например для того чтобы использовать повторяющуюся функциональность в ваших проектах или поделиться ею с миром. Каких-либо ограничений на содержание Gem-а нет, поэтому вы можете создать Gem из любого Ruby проекта. Для этого необходимо выполнить следующую последовательность действий:

1. Создать в корне проекта файл `<project_name>.gemspec`
2. В этой файле описать спецификацию Gem-а с помощью [RubyGems API]
3. Собрать Gem командой `gem build <project_name>.gemspec`
4. Установить Gem командой 'gem install <path/to/gem>.gem'

Файл с расширением `*.gemspec` является файлом с обыкновенным Ruby кодом и описывает спецификацию Gem-а с помощью [RubyGems API]. Минимальный набор методов для успешной сборки Gem-а выглядит так:

```ruby
# running_track.gemspec

Gem::Specification.new do |s|
  s.name        = 'example'
  s.version     = '0.1.0'
  s.licenses    = ['MIT']
  s.summary     = "This is an example!"
  s.description = "Much longer explanation of the example!"
  s.authors     = ["Ruby Coder"]
  s.email       = 'rubycoder@example.com'
  s.files       = ["lib/example.rb"]
  s.homepage    = 'https://rubygems.org/gems/example'
end
```

Наиболее значимым является метод `files=` который принимает аргумент в виде массива с перечислением **всех** файлов, которые будут включены в состав вашей библиотеки.

После сборки библиотеки вы сможете [отправить](http://guides.rubygems.org/publishing/) ваш Gem на http://rubygems.org с помощью команды `gem push <path/to/gem>.gem`, и Gem сможет использоваться разработчиками по всему миру!



#### 1. Методы ActiveSupport API

Для класса `Numeric`:

* Метод, возвращающий объект класса `ActiveSupport::Duration`, представляющий n часов, n минут, n секунд

* Метод, возвращающий экземпляр класса `Time`, со значением времени *через n секунд от текущего момента*

* Метод, возвращающий экземпляр класса `Time`, со значением времени *n секунд тому назад от текущего момента*

Для класса `String`:

* Метод, возвращающий константу по имени строки

* Метод, возвращающий множественное число для значения строки

* Метод, возвращающий строку без подстрок совпавших по шаблону который передан в метод в качестве аргумента

* Метод, проверяющий, стостоит ли строка лишь из пробельных символов

* Метод, заменяющий символ `_` на `-`

Для модуля `ActiveSupport::Configurable`:

* Метод для доступа к упорядоченному хэшу, хранящему конфигурацию (пользовательские настройки) для класса



#### 2. Проверка правописания

Напишите Gem для проверки правописания с помощью [Яндекс.Спеллер API]. Опубликуйте его на http://rubygems.org. Напишите тесты с помощью [RSpec].



#### 3. Работа с данными о беговых дорожках становится лучше

Наделите проект `RunningTrack` дополнительной функциональностью:

* Создайте класс `Track` для представления беговой дорожки

* Класс `Track` должен переопределять метод `to_s` для вывода информации о беговой дорожке в виде строки

* Необходимо обрабатывать исключения, если превышен таймаут обращения к серверу, если в ответе нет данных

* Модуль `RunningTrack` должен определять метод `find` для поиска беговых дорожек по каким-либо условиям, например, наличию wi-fi

* Модуль `RunningTrack` должен реализовывать метод `random(count = 1)` для выбора заданного количества случайных беговых дорожек

* Класс `Track` должен описывать следующие состояния для своих объектов:

  * `unknown`
  * `good`
  * `normal`
  * `bad`

и события для перевода из состояния `unknown` в одно из других

* Модуль `RunningTrack` должен содержать методы `save!` и `load!` для сохранения объектов `RunningTrack::Track` в файл формата `*.yml` и загрузки данных из него



### Контакты для связи

* [GeekBrains](http://geekbrains.ru)
* Электронная почта: `spaceflow@gmail.com`
* [Slack](http://geekbrains-ruby0216.slack.com) канал



<!-- Links -->

[Конечный автомат]: https://ru.wikipedia.org/wiki/Конечный_автомат
[RubyGems]: http://guides.rubygems.org/
[Rails]: http://rubyonrails.org
[RubyGems API]: http://guides.rubygems.org/make-your-own-gem/
[Яндекс.Спеллер API]: http://api.yandex.ru/speller/doc/dg/reference/checkText.xml
[RSpec]: http://rspec.info
